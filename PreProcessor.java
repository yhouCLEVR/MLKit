// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package wine_randomforest.actions;

import java.io.InputStream;
import com.mendix.core.Core;
import com.mendix.mlkit.MLKit;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class PreProcessor extends CustomJavaAction<IMendixObject>
{
	/** @deprecated use Parameter.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __Parameter;
	private final wine_randomforest.proxies.wine Parameter;

	public PreProcessor(
		IContext context,
		IMendixObject _parameter
	)
	{
		super(context);
		this.__Parameter = _parameter;
		this.Parameter = _parameter == null ? null : wine_randomforest.proxies.wine.initialize(getContext(), _parameter);
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
        // Convert entity object to float array
        float[] inputFeature = new float[13];
        inputFeature[0] = Parameter.getAlcohol().floatValue();
        inputFeature[1] = Parameter.getMalic_acid().floatValue();
        inputFeature[2] = Parameter.getAsh().floatValue();
        inputFeature[3] = Parameter.getAlcalinity_of_ash().floatValue();
        inputFeature[4] = Parameter.getMagnesium().floatValue();
        inputFeature[5] = Parameter.getTotal_phenols().floatValue();
        inputFeature[6] = Parameter.getFlavanoids().floatValue();
        inputFeature[7] = Parameter.getNonflavanoid_phenols().floatValue();
        inputFeature[8] = Parameter.getProanthocyanins().floatValue();
        inputFeature[9] = Parameter.getColor_intensity().floatValue();
        inputFeature[10] = Parameter.getHue().floatValue();
        inputFeature[11] = Parameter.getOd280_od315_of_diluted_wines().floatValue();
        inputFeature[12] = Parameter.getProline().floatValue();

        // Convert input feature array to base64
        final InputStream is = MLKit.toInputStream(inputFeature);
        final String base64 = MLKit.toBase64(is);

        // Create output entity object
        final IMendixObject outputObject = Core.instantiate(getContext(), "Wine_RandomForest.ML_Input_Entity_ML_model_mapping_Wine_RF");

        // Set the individual fields
        outputObject.setValue(getContext(), "Alcohol", Parameter.getAlcohol());
        outputObject.setValue(getContext(), "Malic_acid", Parameter.getMalic_acid());
        outputObject.setValue(getContext(), "Ash", Parameter.getAsh());
        outputObject.setValue(getContext(), "Alcalinity_of_ash", Parameter.getAlcalinity_of_ash());
        outputObject.setValue(getContext(), "Magnesium", Parameter.getMagnesium());
        outputObject.setValue(getContext(), "Total_phenols", Parameter.getTotal_phenols());
        outputObject.setValue(getContext(), "Flavanoids", Parameter.getFlavanoids());
        outputObject.setValue(getContext(), "Nonflavanoid_phenols", Parameter.getNonflavanoid_phenols());
        outputObject.setValue(getContext(), "Proanthocyanins", Parameter.getProanthocyanins());
        outputObject.setValue(getContext(), "Color_intensity", Parameter.getColor_intensity());
        outputObject.setValue(getContext(), "Hue", Parameter.getHue());
        outputObject.setValue(getContext(), "Od280_od315_of_diluted_wines", Parameter.getOd280_od315_of_diluted_wines());
        outputObject.setValue(getContext(), "Proline", Parameter.getProline());

        // Set the base64 encoded string
        // outputObject.setValue(getContext(), "Float_input", base64);

        return outputObject;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "PreProcessor";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
